{"version":3,"sources":["Components/Input.jsx","Components/Button.jsx","pages/Login.jsx","actions/index.js","Components/Header.jsx","Components/Select.jsx","Components/Form.jsx","Components/HeadersTable.jsx","Components/TableRow.jsx","Components/Table.jsx","pages/Wallet.jsx","Components/Switcher.jsx","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["Input","id","type","value","onChange","textLabel","dataTestId","className","htmlFor","name","data-testid","defaultProps","textButton","onClick","disabled","Login","submitUser","bind","maskEmail","handleChange","state","email","password","emailMasked","redirect","this","test","setState","target","userEmail","props","length","Button","to","Component","connect","dispatch","payload","Header","totalExpenses","Select","options","map","option","key","payments","categoriesList","Form","currencies","description","currency","method","tag","nameText","HeadersTable","TableRow","convertingCurrency","currencyConverted","exchange","expense","coinSelected","exchangeRates","coinName","split","coinAsk","Number","ask","toFixed","size","Table","expenses","mapTablesInf","wallet","Wallet","updateTotalValue","handleAddExpenses","fetchingValuesCurrencys","a","addCurrenciesDispatch","fetch","fetching","json","fetchingJson","Object","keys","filter","addExpensesDispatch","currencys","updateTotalExpensesDispatch","valueCoinSelected","user","Switcher","exact","path","component","App","Boolean","window","location","hostname","match","INITIAL_STATE","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f87f3b6.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nfunction Input({ id, type, value, onChange, textLabel, dataTestId, className }) {\n  return (\n    <label htmlFor={ id }>\n      { textLabel }\n      <input\n        type={ type }\n        value={ value }\n        onChange={ onChange }\n        name={ id }\n        id={ id }\n        className={ className }\n        data-testid={ dataTestId }\n      />\n    </label>\n  );\n}\n\nInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  textLabel: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  dataTestId: PropTypes.string,\n  className: PropTypes.string,\n};\n\nInput.defaultProps = {\n  dataTestId: '',\n  className: '',\n  onChange: () => {},\n  value: '',\n};\n\nexport default Input;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nfunction Input({ textButton, onClick, className, disabled }) {\n  return (\n    <section className=\"container-button\">\n      <button\n        type=\"button\"\n        onClick={ onClick }\n        className={ className }\n        disabled={ disabled }\n      >\n        { textButton }\n      </button>\n    </section>\n  );\n}\n\nInput.propTypes = {\n  textButton: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  className: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n};\n\nInput.defaultProps = {\n  disabled: null,\n};\n\nexport default Input;\n","import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport Input from '../Components/Input';\nimport Button from '../Components/Button';\nimport { addUserEmail } from '../actions';\nimport './login.css';\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.submitUser = this.submitUser.bind(this);\n    this.maskEmail = this.maskEmail.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      email: '',\n      password: '',\n      emailMasked: false,\n      redirect: false,\n    };\n  }\n\n  maskEmail() {\n    const { email } = this.state;\n    const regEx = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n    if (regEx.test(email)) return this.setState({ emailMasked: true });\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value }, () => {\n      this.maskEmail();\n    });\n  }\n\n  submitUser() {\n    const { props: { userEmail }, state: { email } } = this;\n    userEmail(email);\n    this.setState({ redirect: true });\n  }\n\n  render() {\n    const { state: { email, password, emailMasked, redirect } } = this;\n    const minLengthPassword = 6;\n    const disabled = emailMasked && password.length >= minLengthPassword;\n    return (\n      <main className=\"login-page\">\n        <header className=\"header-login\">\n          <h1 className=\"logo-yourwallet\">\n            YourWallet\n          </h1>\n        </header>\n        <section className=\"container-form-login\">\n          <form className=\"form-login\">\n            <h2 className=\"login-to-your-account\"> Entre Em Sua Conta </h2>\n            <Input\n              type=\"email\"\n              value={ email }\n              id=\"email\"\n              textLabel=\"Email: \"\n              className=\"input-login\"\n              onChange={ this.handleChange }\n              dataTestId=\"email-input\"\n            />\n            <Input\n              type=\"password\"\n              value={ password }\n              id=\"password\"\n              className=\"input-login\"\n              textLabel=\"Senha: \"\n              onChange={ this.handleChange }\n              dataTestId=\"password-input\"\n            />\n            <Button\n              textButton=\"Entrar\"\n              onClick={ this.submitUser }\n              disabled={ !disabled }\n              className=\"btn-submit\"\n            />\n          </form>\n        </section>\n        { redirect && <Redirect to=\"/carteira\" /> }\n      </main>\n    );\n  }\n}\n\nLogin.propTypes = {\n  userEmail: PropTypes.func.isRequired,\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    userEmail: (email) => dispatch(addUserEmail(email)),\n  };\n}\n\nexport default connect(null, mapDispatchToProps)(Login);\n","export const ADD_USER_EMAIL = 'ADD_USER_EMAIL';\nexport const ADD_EXPENSES = 'ADD_EXPENSES';\nexport const ADD_CURRENCIES = 'ADD_CURRENCIES';\nexport const UPDATE_TOTAL_EXPENSES = 'UPDATE_TOTAL_EXPENSES';\n\nexport const addUserEmail = (payload) => ({ type: ADD_USER_EMAIL, payload });\n\nexport const addExpenses = (payload) => ({ type: ADD_EXPENSES, payload });\n\nexport const addCurrencies = (payload) => ({ type: ADD_CURRENCIES, payload });\n\nexport const updateTotalExpenses = (payload) => (\n  { type: UPDATE_TOTAL_EXPENSES, payload }\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Header({ email, totalExpenses }) {\n  return (\n    <header className=\"header\">\n      <div data-testid=\"email-field\" className=\"email-header\">\n        {`Email: ${email}`}\n      </div>\n      <div className=\"expenses\">\n        <div data-testid=\"total-field\">\n          {`Despesas totais: ${totalExpenses}`}\n        </div>\n        <span data-testid=\"header-currency-field\"> BRL </span>\n      </div>\n    </header>\n  );\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  totalExpenses: PropTypes.number,\n};\n\nHeader.defaultProps = {\n  totalExpenses: 0,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Select({ id, textLabel, className, options, value, onChange }) {\n  return (\n    <label htmlFor={ id }>\n      { textLabel }\n      <select\n        className={ className }\n        id={ id }\n        name={ id }\n        value={ value }\n        onChange={ onChange }\n      >\n        {\n          options.map((option) => (\n            <option key={ option }>\n              { option }\n            </option>\n          ))\n        }\n      </select>\n    </label>\n  );\n}\n\nSelect.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  textLabel: PropTypes.string.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string),\n  onChange: PropTypes.func.isRequired,\n};\n\nSelect.defaultProps = {\n  options: [],\n  className: '',\n};\n\nexport default Select;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Input from './Input';\nimport Select from './Select';\nimport Button from './Button';\n\nconst payments = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\nconst categoriesList = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n\nfunction Form({\n  currencies, onChange, value, description, currency, method, tag, onClick }) {\n  return (\n    <form className=\"form\">\n      <Input\n        textLabel=\"Valor: \"\n        type=\"number\"\n        nameText=\"value\"\n        id=\"value\"\n        value={ value }\n        onChange={ onChange }\n      />\n      <Input\n        textLabel=\"Descrição: \"\n        type=\"text\"\n        nameText=\"description\"\n        id=\"description\"\n        value={ description }\n        onChange={ onChange }\n      />\n      <Select\n        textLabel=\"Moeda: \"\n        id=\"currency\"\n        value={ currency }\n        options={ currencies }\n        onChange={ onChange }\n      />\n      <Select\n        textLabel=\"Método de pagamento: \"\n        id=\"method\"\n        value={ method }\n        options={ payments }\n        onChange={ onChange }\n      />\n      <Select\n        textLabel=\"Tag: \"\n        id=\"tag\"\n        value={ tag }\n        onChange={ onChange }\n        options={ categoriesList }\n      />\n      <Button\n        className=\"btn-add-expenses\"\n        textButton=\"Adicionar despesas\"\n        onClick={ onClick }\n      />\n    </form>\n  );\n}\n\nForm.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.string),\n  onChange: PropTypes.func.isRequired,\n  onClick: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  method: PropTypes.string.isRequired,\n  currency: PropTypes.string.isRequired,\n  tag: PropTypes.string.isRequired,\n};\n\nForm.defaultProps = {\n  currencies: [],\n};\n\nexport default Form;\n","import React from 'react';\n\nfunction HeadersTable() {\n  return (\n    <>\n      <th>\n        Valor\n      </th>\n      <th>\n        Descrição\n      </th>\n      <th>\n        Moeda\n      </th>\n      <th>\n        Método de Pagamento\n      </th>\n      <th>\n        Categoria\n      </th>\n      <th>\n        Câmbio utilizado\n      </th>\n      <th>\n        Valor Convertido\n      </th>\n      <th>\n        Moeda de conversão\n      </th>\n      <th>\n        Editar/Excluir\n      </th>\n    </>\n  );\n}\n\nexport default HeadersTable;\n","import React, { Component } from 'react';\nimport { GoPencil } from 'react-icons/go';\nimport { TiDelete } from 'react-icons/ti';\nimport Button from './Button';\n\nclass TableRow extends Component {\n  constructor() {\n    super();\n\n    this.convertingCurrency = this.convertingCurrency.bind(this);\n    this.state = {\n      currencyConverted: 0,\n      exchange: 'Real',\n    };\n  }\n\n  componentDidMount() {\n    this.convertingCurrency();\n  }\n\n  convertingCurrency() {\n    const { expense: { currency, exchangeRates } } = this.props;\n    const coinSelected = exchangeRates[currency];\n    const coinName = coinSelected.name.split('/')[0];\n    const coinAsk = Number(coinSelected.ask).toFixed(2);\n    this.setState({ currencyConverted: coinAsk, exchange: coinName });\n  }\n\n  render() {\n    const { expense: { value, description, currency, method, tag } } = this.props;\n    const { state: { currencyConverted, exchange } } = this;\n    return (\n      <>\n        <tr className=\"tr-table\">\n          <td>\n            {value}\n          </td>\n          <td>\n            {description}\n          </td>\n          <td>\n            {currency}\n          </td>\n          <td>\n            {method}\n          </td>\n          <td>\n            {tag}\n          </td>\n          <td>\n            { exchange }\n          </td>\n          <td>\n            { currencyConverted }\n          </td>\n          <td>\n            BRL\n          </td>\n          <td className=\"buttons-update-delete\">\n            <button className=\"btn-update-delete btn-update\">\n              <GoPencil size=\"1.2em\" />\n            </button>\n            <button className=\"btn-update-delete btn-delete\">\n              <TiDelete size=\"1.4em\" />\n            </button>\n          </td>\n        </tr>\n      </>\n    );\n  }\n}\n\nexport default TableRow;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport HeadersTable from './HeadersTable';\nimport TableRow from './TableRow';\nimport { connect } from 'react-redux';\n\nclass Table extends Component {\n  mapTablesInf() {\n    const { expenses } = this.props;\n    return expenses.map((expense) => <TableRow expense={ expense } /> )\n  }\n\n  render() {\n   \n    return (\n      <div className=\"table-container\">\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <HeadersTable />\n            </tr>\n          </thead>\n          <tbody>\n            { this.mapTablesInf() }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nTable.propTypes = {\n  expense: PropTypes.shape({\n    currency: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    method: PropTypes.string.isRequired,\n    tag: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    exchangeRates: PropTypes.shape({}).isRequired,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps, null)(Table);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../Components/Header';\nimport Form from '../Components/Form';\nimport Table from '../Components/Table';\nimport { addCurrencies, addExpenses, updateTotalExpenses } from '../actions';\nimport './wallet.css';\n\nclass Wallet extends Component {\n  constructor() {\n    super();\n\n    this.updateTotalValue = this.updateTotalValue.bind(this);\n    this.handleAddExpenses = this.handleAddExpenses.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n  }\n\n  componentDidMount() {\n    this.fetchingValuesCurrencys();\n  }\n\n  async fetchingValuesCurrencys() {\n    const { addCurrenciesDispatch } = this.props;\n    const fetching = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const fetchingJson = await fetching.json();\n    const currencies = Object.keys(fetchingJson).filter(\n      (currency) => (currency !== 'USDT'),\n    );\n    addCurrenciesDispatch(currencies);\n    return fetchingJson;\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  async handleAddExpenses() {\n    const {\n      state,\n      props: { addExpensesDispatch, expenses },\n    } = this;\n    const currencys = await this.fetchingValuesCurrencys();\n\n    addExpensesDispatch(\n      { id: expenses.length, ...state, exchangeRates: { ...currencys } },\n    );\n    this.updateTotalValue(currencys);\n  }\n\n  updateTotalValue(currencys) {\n    const { value, currency } = this.state;\n    const { updateTotalExpensesDispatch, totalExpenses } = this.props;\n    const valueCoinSelected = currencys[currency].ask;\n    const valueMultiplyCoinSelected = Number((value * valueCoinSelected).toFixed([2]));\n    updateTotalExpensesDispatch(totalExpenses + valueMultiplyCoinSelected);\n  }\n\n  render() {\n    const { props: { email, currencies, totalExpenses }, state: {\n      value,\n      description,\n      currency,\n      method,\n      tag,\n    } } = this;\n\n    return (\n      <main className=\"wallet-page\">\n        <Header email={ email } totalExpenses={ totalExpenses } />\n        <section className=\"container-form\">\n          <Form\n            currencies={ currencies }\n            onChange={ this.handleChange }\n            value={ value }\n            description={ description }\n            currency={ currency }\n            method={ method }\n            tag={ tag }\n            onClick={ this.handleAddExpenses }\n          />\n        </section>\n        <section className=\"tables-container\">\n          <Table />\n        </section>\n      </main>\n    );\n  }\n}\n\nWallet.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  totalExpenses: PropTypes.number.isRequired,\n  addExpensesDispatch: PropTypes.func.isRequired,\n  addCurrenciesDispatch: PropTypes.func.isRequired,\n  updateTotalExpensesDispatch: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    email: state.user.email,\n    expenses: state.wallet.expenses,\n    currencies: state.wallet.currencies,\n    totalExpenses: state.wallet.totalExpenses,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addExpensesDispatch: (state) => dispatch(addExpenses(state)),\n    addCurrenciesDispatch: (currencies) => dispatch(addCurrencies(currencies)),\n    updateTotalExpensesDispatch: (totalExpenses) => dispatch(\n      updateTotalExpenses(totalExpenses),\n    ),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from '../pages/Login';\nimport Wallet from '../pages/Wallet';\n\nfunction Switcher() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default Switcher;\n","import React from 'react';\nimport Switcher from './Components/Switcher';\nimport './App.css';\n\nfunction App() {\n  return (\n    <main className=\"App\">\n      <Switcher />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ADD_USER_EMAIL } from '../actions/index';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nexport default function reducerUser(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case ADD_USER_EMAIL:\n    return {\n      ...state,\n      email: action.payload,\n    };\n  default:\n    return state;\n  }\n}\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n\nimport { ADD_EXPENSES, ADD_CURRENCIES, UPDATE_TOTAL_EXPENSES } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  totalExpenses: 0,\n};\n\nexport default function reducerWallet(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case ADD_EXPENSES:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        action.payload,\n      ],\n    };\n  case ADD_CURRENCIES:\n    return {\n      ...state,\n      currencies: action.payload,\n    };\n  case UPDATE_TOTAL_EXPENSES:\n    return {\n      ...state,\n      totalExpenses: action.payload,\n    };\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(\n  applyMiddleware(thunk),\n));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/index';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}